class Student:
    id_counter = 1

    def __init__(self, name, gender, age, math_score, physics_score, chemistry_score):
        self.id = Student.id_counter
        Student.id_counter += 1
        self.name = name
        self.gender = gender
        self.age = age
        self.math_score = math_score
        self.physics_score = physics_score
        self.chemistry_score = chemistry_score
        self.average_score = (math_score + physics_score + chemistry_score) / 3
        self.academic_performance = self.calculate_academic_performance()

    def calculate_academic_performance(self):
        if self.average_score >= 8:
            return "Excellent"
        elif 6.5 <= self.average_score < 8:
            return "Good"
        elif 5 <= self.average_score < 6.5:
            return "Average"
        else:
            return "Weak"

class StudentManager:
    def __init__(self):
        self.students = []

    def add_student(self, student):
        self.students.append(student)

    def update_student(self, student_id, new_info):
        for student in self.students:
            if student.id == student_id:
                student.__dict__.update(new_info)
                student.average_score = (student.math_score + student.physics_score + student.chemistry_score) / 3
                student.academic_performance = student.calculate_academic_performance()
                return True
        return False

    def delete_student(self, student_id):
        for student in self.students:
            if student.id == student_id:
                self.students.remove(student)
                return True
        return False

    def search_student_by_name(self, name):
        result = []
        for student in self.students:
            if student.name == name:
                result.append(student)
        return result

    def sort_students_by_average_score(self):
        self.students.sort(key=lambda x: x.average_score, reverse=True)

    def sort_students_by_name(self):
        self.students.sort(key=lambda x: x.name)

    def sort_students_by_id(self):
        self.students.sort(key=lambda x: x.id)

    def display_students(self):
        for student in self.students:
            print(f"ID: {student.id}, Name: {student.name}, Gender: {student.gender}, Age: {student.age}, "
                  f"Math Score: {student.math_score}, Physics Score: {student.physics_score}, "
                  f"Chemistry Score: {student.chemistry_score}, Average Score: {student.average_score}, "
                  f"Academic Performance: {student.academic_performance}")

def main():
    manager = StudentManager()
    while True:
        print("\nStudent Management System Menu:")
        print("1. Add student")
        print("2. Update student information by ID")
        print("3. Delete student by ID")
        print("4. Search student by name")
        print("5. Sort students by average score")
        print("6. Sort students by name")
        print("7. Sort students by ID")
        print("8. Display list of students")
        print("9. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            name = input("Enter student name: ")
            gender = input("Enter student gender: ")
            age = int(input("Enter student age: "))
            math_score = float(input("Enter math score: "))
            physics_score = float(input("Enter physics score: "))
            chemistry_score = float(input("Enter chemistry score: "))
            student = Student(name, gender, age, math_score, physics_score, chemistry_score)
            manager.add_student(student)
            print("Student added successfully.")

        elif choice == "2":
            student_id = int(input("Enter student ID to update: "))
            new_info = {}
            new_info['name'] = input("Enter new name: ")
            new_info['gender'] = input("Enter new gender: ")
            new_info['age'] = int(input("Enter new age: "))
            new_info['math_score'] = float(input("Enter new math score: "))
            new_info['physics_score'] = float(input("Enter new physics score: "))
            new_info['chemistry_score'] = float(input("Enter new chemistry score: "))
            if manager.update_student(student_id, new_info):
                print("Student information updated successfully.")
            else:
                print("Student not found.")

        elif choice == "3":
            student_id = int(input("Enter student ID to delete: "))
            if manager.delete_student(student_id):
                print("Student deleted successfully.")
            else:
                print("Student not found.")

        elif choice == "4":
            name = input("Enter student name to search: ")
            result = manager.search_student_by_name(name)
            if result:
                print("Search result:")
                for student in result:
                    print(f"ID: {student.id}, Name: {student.name}, Gender: {student.gender}, Age: {student.age}, "
                          f"Math Score: {student.math_score}, Physics Score: {student.physics_score}, "
                          f"Chemistry Score: {student.chemistry_score}, Average Score: {student.average_score}, "
                          f"Academic Performance: {student.academic_performance}")
            else:
                print("No student found with that name.")

        elif choice == "5":
            manager.sort_students_by_average_score()
            print("Students sorted by average score.")

        elif choice == "6":
            manager.sort_students_by_name()
            print("Students sorted by name.")

        elif choice == "7":
            manager.sort_students_by_id()
            print("Students sorted by ID.")

        elif choice == "8":
            manager.display_students()

        elif choice == "9":
            print("Exiting program...")
            break

        else:
            print("Invalid choice. Please enter a number between 1 and 9.")

if __name__ == "__main__":
    main()
